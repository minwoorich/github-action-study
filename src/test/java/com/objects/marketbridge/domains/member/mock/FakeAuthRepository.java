package com.objects.marketbridge.domains.member.mock;

import com.objects.marketbridge.domains.member.domain.Member;
import com.objects.marketbridge.domains.member.dto.AuthMember;
import com.objects.marketbridge.domains.member.service.port.AuthRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeAuthRepository implements AuthRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    List<Member> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public AuthMember findAuthMemberByEmail(String email) {

        Member member = (data.stream()
                .filter(item -> item.getEmail().equals(email)).findAny())
                .orElseThrow(EntityNotFoundException::new);

        return new AuthMember(member.getId(), member.getEmail(), member.getPassword());
    }

    public void addData(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMember = Member.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(member.getEmail())
                    .name(member.getName())
                    .password(member.getPassword())
                    .phoneNo(member.getPhoneNo())
                    .isAgree(member.getIsAgree())
                    .isAlert(member.getIsAlert())
                    .membership(member.getMembership())
                    .build();
            data.add(newMember);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
        }
        data.add(member);
    }
}
