package com.objects.marketbridge.domains.member.mock;

import com.objects.marketbridge.domains.member.domain.Member;
import com.objects.marketbridge.domains.member.dto.GetMemberInfoWithPassword;
import com.objects.marketbridge.domains.member.dto.MemberEmail;
import com.objects.marketbridge.domains.member.dto.MemberId;
import com.objects.marketbridge.domains.member.service.port.MemberRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.orm.jpa.JpaObjectRetrievalFailureException;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.*;

@Slf4j
public class FakeMemberRepository implements MemberRepository {

    private Long autoGeneratedId = 0L;
    private List<Member> data = new ArrayList<>();

    @Override
    public boolean existsByEmail(String email) {
        return data.stream().anyMatch(item -> item.getEmail().equals(email));
    }

    @Override
    public Member findByEmail(String email) {
        return (data.stream()
                .filter(item -> item.getEmail().equals(email)).findAny())
                .orElseThrow(() -> new JpaObjectRetrievalFailureException(new EntityNotFoundException("해당 멤버 엔티티가 존재하지 않습니다. 입력 email = "+email)));

    }

    @Override
    public Member findById(Long id) {
        return data.stream()
                .filter(member -> member.getId().equals(id))
                .findAny().orElseThrow(() -> new JpaObjectRetrievalFailureException(new EntityNotFoundException("해당 멤버 엔티티가 존재하지 않습니다. 입력 id = "+id)));
    }

    @Override
    public void deleteAllInBatch() {
        data.clear();
        autoGeneratedId = 0L;
    }

    @Override
    public GetMemberInfoWithPassword getMemberInfoById(Long memberId) {
        return null;
    }

    @Override
    public MemberEmail getEmailById(Long memberId) {
        return null;
    }

    @Override
    public MemberId findIdByNameAndEmail(String name, String email) {
        return null;
    }

    @Override
    public MemberEmail findEmailByNameAndPhoneNo(String name, String phoneNo) {
        return null;
    }

    @Override
    public void saveAll(List<Member> members) {
        members.forEach(this::save);
    }

    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            ReflectionTestUtils.setField(member, "id", ++autoGeneratedId, Long.class);
            data.add(member);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
        }
        return member;
    }
}
