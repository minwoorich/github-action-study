package com.objects.marketbridge.domains.order.mock;

import com.objects.marketbridge.domains.member.domain.Address;
import com.objects.marketbridge.domains.order.service.port.AddressRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.orm.jpa.JpaObjectRetrievalFailureException;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class FakeAddressRepository implements AddressRepository {

    private Long autoGeneratedId = 0L;
    private List<Address> data = new ArrayList<>();
    @Override
    public Address findById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny().orElseThrow(() -> new JpaObjectRetrievalFailureException(new EntityNotFoundException("등록된 주소가 없습니다. 입력한 id = "+id)));
    }

    @Override
    public List<Address> findByMemberId(Long memberId) {
        return data.stream()
                .filter(item -> item.getMember().getId().equals(memberId))
                .collect(Collectors.toList());
    }

    @Override
    public Address findDefaultAddress(Long memberId) {
        return null;
    }

    @Override
    public Long countAddress(Long memberId) {
        return null;
    }

    @Override
    public Address save(Address address) {
        if (address.getId() == null || address.getId() == 0) {
            ReflectionTestUtils.setField(address, "id", ++autoGeneratedId, Long.class);
            data.add(address);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), address.getId()));
            data.add(address);
        }
        return address;
    }

    @Override
    public void deleteById(Long addressId) {

    }

    @Override
    public void deleteAllByIdInBatch(Long addressId) {

    }

    @Override
    public void saveAll(List<Address> addresses) {

    }

    @Override
    public void deleteAllInBatch() {
        autoGeneratedId = 0L;
        data.clear();
    }
}