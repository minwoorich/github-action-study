package com.objects.marketbridge.domains.coupon.mock;

import com.objects.marketbridge.domains.coupon.domain.MemberCoupon;
import com.objects.marketbridge.domains.coupon.service.port.MemberCouponRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.orm.jpa.JpaObjectRetrievalFailureException;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

public class FakeMemberCouponRepository implements MemberCouponRepository {

    private Long autoGeneratedId = 0L;
    private List<MemberCoupon> data = new ArrayList<>();

    @Override
    public MemberCoupon findById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny()
                .orElseThrow(() -> new JpaObjectRetrievalFailureException(new EntityNotFoundException("해당하는 MemberCoupon 엔티티가 존재하지 않습니다. 입력 id = "+id)));
    }

    @Override
    public void deleteAllInBatch() {
        autoGeneratedId = 0L;
        data.clear();
    }

    @Override
    public MemberCoupon findByMemberIdAndCouponId(Long memberId, Long couponId) {
        return data.stream()
                .filter(mc -> mc.getMember().getId().equals(memberId))
                .filter(mc -> mc.getCoupon().getId().equals(couponId))
                .findAny()
                .orElseThrow(() -> new JpaObjectRetrievalFailureException(
                        new EntityNotFoundException("해당하는 MemberCoupon 엔티티가 존재하지 않습니다. 입력 (memberId, coponId) = ("+memberId+", "+couponId+")")));
    }

    @Override
    public Optional<MemberCoupon> findByMemberIdAndCouponIdOptional(Long memberId, Long couponId) {

        try {
            return Optional.of(findByMemberIdAndCouponId(memberId, couponId));
        } catch (JpaObjectRetrievalFailureException e) {
            return  Optional.empty();
        }
    }

    @Override
    public List<MemberCoupon> findByMemberId(Long memberId) {
        return data.stream().filter(mc -> mc.getMember().getId().equals(memberId)).collect(Collectors.toList());
    }

    @Override
    public MemberCoupon save(MemberCoupon memberCoupon) {
        if (memberCoupon.getId() == null || memberCoupon.getId() == 0) {
            ReflectionTestUtils.setField(memberCoupon, "id", ++autoGeneratedId, Long.class);
            data.add(memberCoupon);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), memberCoupon.getId()));
            data.add(memberCoupon);
        }
        return memberCoupon;
    }

    @Override
    public void saveAll(List<MemberCoupon> memberCoupons) {
        memberCoupons.forEach(this::save);
    }

    @Override
    public List<MemberCoupon> findAll() {
        return data;
    }

    @Override
    public MemberCoupon findByMemberIdAndCouponIdAndProductId(Long memberId, Long couponId, Long productId) {
        return null;
    }
}
