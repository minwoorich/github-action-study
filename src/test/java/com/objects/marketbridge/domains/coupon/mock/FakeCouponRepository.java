package com.objects.marketbridge.domains.coupon.mock;

import com.objects.marketbridge.domains.coupon.domain.Coupon;
import com.objects.marketbridge.domains.coupon.service.port.CouponRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.orm.jpa.JpaObjectRetrievalFailureException;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Slf4j
public class FakeCouponRepository implements CouponRepository {

    private Long autoGeneratedId = 0L;
    private List<Coupon> data = new ArrayList<>();

    @Override
    public Coupon findById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findAny()
                .orElseThrow(() -> new JpaObjectRetrievalFailureException(new EntityNotFoundException("해당 쿠폰 엔티티가 존재하지 않습니다. 입력 id = "+id)));
    }

    @Override
    public Coupon findByIdWithMemberCoupons(Long id) {
        return findById(id);
    }

    @Override
    public Coupon save(Coupon coupon) {
        if (coupon.getId() == null || coupon.getId() == 0) {
            ReflectionTestUtils.setField(coupon, "id", ++autoGeneratedId, Long.class);
            data.add(coupon);
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), coupon.getId()));
            data.add(coupon);
        }
        return coupon;
    }

    @Override
    public List<Coupon> findByProductGroupId(Long productGroupId) {
        return data.stream()
                .filter(coupon -> coupon.getProductGroupId().equals(productGroupId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Coupon> findByProductGroupIdWithMemberCoupons(Long productGroupId) {
        return findByProductGroupId(productGroupId);
    }

    @Override
    public void saveAll(List<Coupon> coupons) {
        coupons.forEach(this::save);
    }

    @Override
    public Coupon saveAndFlush(Coupon coupon) {
        return null;
    }

    @Override
    public List<Coupon> findAll() {
        return data;
    }

    @Override
    public void deleteAllInBatch() {
        data.clear();
        autoGeneratedId = 0L;
    }
}
