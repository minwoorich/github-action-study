package com.objects.marketbridge.domains.product.mock;

import com.objects.marketbridge.domains.product.domain.ProdOption;
import com.objects.marketbridge.domains.product.dto.OptionDto;
import com.objects.marketbridge.domains.product.service.port.ProdOptionCustomRepository;
import com.objects.marketbridge.domains.product.service.port.ProdOptionRepository;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeProdOptionRepository implements ProdOptionRepository, ProdOptionCustomRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    List<ProdOption> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public void save(ProdOption prodOption) {
        if (prodOption.getId() == null || prodOption.getId() == 0){
            data.add(ProdOption.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .option(prodOption.getOption())
                    .product(prodOption.getProduct())
                    .build());
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), prodOption.getId()));
            data.add(prodOption);
        }
    }

    @Override
    public void saveAll(List<ProdOption> prodOptions) {
        for (ProdOption prodOption: prodOptions) {
            save(prodOption);
        }
    }

    @Override
    public void deleteAllInBatch() {

    }

    @Override
    public List<OptionDto> findAllByProductId(Long productId) {
        List<OptionDto> result = new ArrayList<>();

        for (ProdOption prodOption:data) {
            if(prodOption.getProduct().getId() == productId){
                OptionDto optionDto = OptionDto.builder()
                        .optionCategory(prodOption.getOption().getOptionCategory().getName())
                        .name(prodOption.getOption().getName())
                        .build();
                result.add(optionDto);
            }
        }
        return result;
    }
}
