import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.asciidoctor.jvm.convert" version '3.3.2'
	id 'com.epages.restdocs-api-spec' version '0.19.2'
	id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.objects'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	testImplementation 'org.projectlombok:lombok:1.18.28'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// RestDocs & OpenApiSpec
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation "com.epages:restdocs-api-spec-mockmvc:0.19.2"
	swaggerUI 'org.webjars:swagger-ui:5.12.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation("org.springframework.security:spring-security-test")

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// redis
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// WebClient 사용시 필요
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Apache POI //category데이터 excel에서 db로 등록시 필요
	implementation 'org.apache.poi:poi:4.1.2'
	implementation 'org.apache.poi:poi-ooxml:4.1.2'
	implementation 'org.apache.commons:commons-compress:1.26.0'

	//LocalDateTime 처리 라이브러리
	implementation 'org.json:json:20231013'

	//hibernate 5
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5-jakarta'

	implementation 'org.springframework.boot:spring-boot-starter-actuator' // 액츄에이터 추가
	implementation 'io.micrometer:micrometer-registry-prometheus' // 프로메테우스 추가
}

ext { // 전역 변수
	snippetsDir = file('build/generated-snippets')
}

swaggerSources {
	sample {
		setInputFile(file("build/api-spec/openapi3.yaml"))
	}
}

openapi3 {
	servers = [{ url = "http://localhost:8080" }, { url = "https://objects-mb.com" }]
	title = "Market Bridge API Documentation"
	description = "Market Bridge REST Docs with SwaggerUI."
	version = "0.0.1"
	format = "yaml"
}

tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn('openapi3')
	doFirst {
		def swaggerUIFile = file("build/api-spec/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []"

		swaggerUIFile.append securitySchemesContent
	}

	copy {
		from 'build/api-spec'
		into 'src/main/resources/static/docs'
	}

	copy {
		from 'build/swagger-ui-sample'
		into 'src/main/resources/static/swagger-ui-sample'
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'

	sourceDir('src/docs/asciidoc')
	sources('index.adoc')
	outputDir('src/main/resources/static/docs')

	baseDirFollowsSourceDir() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다
	dependsOn test
}

def querydslDir = "src/main/generated"

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}

bootJar {
	dependsOn(asciidoctor)
	dependsOn(generateSwaggerUISample)
}